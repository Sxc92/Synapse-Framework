# ===========================================
# Synapse Security 模块完整配置示例
# ===========================================
# 基于 Sa-Token 框架的完整安全配置
# 支持 JWT、OAuth2.0、数据权限、登录安全等功能

# ===========================================
# Synapse Security 核心配置
# ===========================================
synapse:
  security:
    # 是否启用安全模块
    enabled: true
    
    # 安全模式：STRICT(严格) | PERMISSIVE(宽松) | DISABLED(关闭)
    mode: STRICT
    
    # 是否启用安全日志
    security-logging: true
    
    # 安全日志级别
    security-log-level: INFO
    
    # ===========================================
    # JWT 配置
    # ===========================================
    jwt:
      # 是否启用JWT认证
      enabled: true
      
      # JWT签名密钥（生产环境请使用更复杂的密钥）
      secret: "your-super-secret-jwt-signing-key-here-change-in-production"
      
      # JWT过期时间（秒）
      expiration: 86400
      
      # JWT请求头名称
      header-name: "Authorization"
      
      # JWT令牌前缀
      prefix: "Bearer "
    
    # ===========================================
    # Sa-Token 配置
    # ===========================================
    satoken:
      # 是否启用Sa-Token
      enabled: true
      
      # Token名称
      token-name: "satoken"
      
      # Token有效期（秒）- 30天
      timeout: 2592000
      
      # Token活跃有效期（秒）- 30分钟
      activity-timeout: 1800
      
      # 是否允许同一账号并发登录
      is-concurrent: true
      
      # 是否在多个项目中共享Token
      is-share: false
      
      # 是否输出操作日志
      is-log: true
      
      # 是否从Cookie中读取Token
      is-read-cookie: false
      
      # 是否从请求头中读取Token
      is-read-header: true
      
      # 是否从请求体中读取Token
      is-read-body: false
      
      # 是否在响应头中写入Token
      is-write-header: true
      
      # 是否在响应体中写入Token
      is-write-body: false
      
      # 是否在Cookie中写入Token
      is-write-cookie: false
      
      # Token前缀
      token-prefix: "Bearer"
      
      # 是否打印Sa-Token版本信息和banner（重要：控制启动时的banner显示）
      is-print: false
      
      # Token风格
      token-style: "uuid"
    
    # ===========================================
    # OAuth2.0 配置
    # ===========================================
    oauth2:
      # 是否启用OAuth2.0
      enabled: false
      
      # OAuth2客户端ID
      client-id: "your-oauth2-client-id"
      
      # OAuth2客户端密钥
      client-secret: "your-oauth2-client-secret"
      
      # OAuth2授权服务器URL
      authorization-server-url: "https://oauth.example.com/oauth/authorize"
      
      # OAuth2令牌服务器URL
      token-server-url: "https://oauth.example.com/oauth/token"
      
      # OAuth2用户信息URL
      user-info-url: "https://oauth.example.com/oauth/userinfo"
      
      # OAuth2重定向URI
      redirect-uri: "http://localhost:8080/oauth2/callback"
      
      # OAuth2授权范围
      scope: "read,write"
    
    # ===========================================
    # 登录安全配置
    # ===========================================
    login:
      # 最大登录失败次数
      max-fail-count: 5
      
      # 账户锁定持续时间（秒）
      lock-duration: 1800
      
      # 失败计数窗口时间（秒）
      fail-window: 300
    
    # ===========================================
    # 数据权限配置
    # ===========================================
    data-permission:
      # 是否启用数据权限
      enabled: true
      
      # 数据权限规则缓存时间（秒）
      cache-timeout: 3600
      
      # 是否启用SQL注入防护
      sql-injection-protection: true

# ===========================================
# 注意：Sa-Token 配置已统一到 synapse.security.satoken 下
# 不再需要单独的 sa-token 配置节点
# ===========================================

# ===========================================
# Redis 配置（用于存储用户会话和Token）
# ===========================================
spring:
  redis:
    # Redis服务器地址
    host: localhost
    
    # Redis服务器端口
    port: 6379
    
    # Redis密码（如果有）
    password: 
    
    # Redis数据库索引
    database: 0
    
    # 连接超时时间
    timeout: 5000ms
    
    # 连接池配置
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 8
        
        # 连接池最大空闲连接数
        max-idle: 8
        
        # 连接池最小空闲连接数
        min-idle: 0
        
        # 连接池最大阻塞等待时间
        max-wait: -1ms

# ===========================================
# 日志配置
# ===========================================
logging:
  level:
    # Synapse Security 模块日志级别
    com.indigo.security: INFO
    
    # Sa-Token 框架日志级别
    cn.dev33.satoken: INFO
    
    # 根日志级别
    root: INFO
  
  # 日志格式配置
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# ===========================================
# 微服务间调用配置
# ===========================================
feign:
  client:
    config:
      default:
        # 连接超时时间
        connectTimeout: 5000
        
        # 读取超时时间
        readTimeout: 5000
        
        # 日志级别
        loggerLevel: basic
        
        # 请求拦截器（可用于自动添加JWT token）
        requestInterceptors:
          - com.indigo.security.interceptor.JWTFeignInterceptor

# ===========================================
# Web 安全配置
# ===========================================
server:
  # 服务器端口
  port: 8080
  
  # 请求头大小限制
  max-http-header-size: 8KB
  
  # 请求体大小限制
  max-http-post-size: 2MB

# ===========================================
# 管理端点配置
# ===========================================
management:
  endpoints:
    web:
      exposure:
        # 暴露的管理端点
        include: health,info,metrics,prometheus
      
      # 管理端点基础路径
      base-path: /actuator
  
  # 健康检查配置
  health:
    # 显示详细信息
    show-details: when-authorized
    
    # 自定义健康检查
    defaults:
      enabled: true

# ===========================================
# 缓存配置
# ===========================================
spring:
  cache:
    type: redis
    
    # 缓存名称配置
    cache-names:
      - user-session
      - permission-cache
      - data-permission-rules
    
    # Redis缓存配置
    redis:
      # 缓存过期时间（毫秒）
      time-to-live: 3600000
      
      # 是否缓存空值
      cache-null-values: false
      
      # 键前缀
      key-prefix: "synapse:security:"
      
      # 是否使用键前缀
      use-key-prefix: true

# ===========================================
# 监控配置
# ===========================================
management:
  metrics:
    # 启用指标收集
    enabled: true
    
    # 指标导出配置
    export:
      prometheus:
        enabled: true
        
    # 自定义指标
    distribution:
      percentiles-histogram:
        http.server.requests: true
      
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99

# ===========================================
# 环境特定配置示例
# ===========================================

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev

synapse:
  security:
    # 开发环境使用宽松模式
    mode: PERMISSIVE
    
    # 启用详细日志
    security-logging: true
    security-log-level: DEBUG
    
    # 较短的Token有效期
    satoken:
      timeout: 3600  # 1小时
      activity-timeout: 1800  # 30分钟

logging:
  level:
    com.indigo.security: DEBUG
    cn.dev33.satoken: DEBUG

---
# 测试环境配置
spring:
  config:
    activate:
      on-profile: test

synapse:
  security:
    # 测试环境使用严格模式
    mode: STRICT
    
    # 禁用安全日志
    security-logging: false

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod

synapse:
  security:
    # 生产环境使用严格模式
    mode: STRICT
    
    # 生产环境密钥（请修改为实际密钥）
    jwt:
      secret: "PRODUCTION-SUPER-SECRET-KEY-CHANGE-THIS"
    
    # 较长的Token有效期
    satoken:
      timeout: 2592000  # 30天
      activity-timeout: 1800  # 30分钟

logging:
  level:
    com.indigo.security: WARN
    cn.dev33.satoken: WARN
    root: WARN

# 生产环境Redis配置
spring:
  redis:
    host: redis-prod.example.com
    port: 6379
    password: ${REDIS_PASSWORD:}
    database: 0
    timeout: 3000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 3000ms
